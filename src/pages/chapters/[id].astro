---
import FootnoteSlideOver from '../../components/FootnoteSlideOver';
import Pauri from '../../components/Pauri.astro';
import GurmukhiLayout from '../../layouts/GurmukhiLayout.astro';
import type { Chapter } from '../../types/appTypes';
import { fetchFootnoteContent } from '../../helpers/fetchFootnoteContent';
import { v2 as cloudinary } from 'cloudinary';

type ChapterResponse = {
  chapter: Chapter;
};

export const getStaticPaths = async () => {
  const API_URL = import.meta.env.API_URL;

  const getChapterIds = async (bookId) => {
    const res = await fetch(`${API_URL}/books/${bookId}/chapters.json`);
    const { chapters } = await res.json();

    return chapters.map((chapter) => chapter.id);
  };

  const getAllChapterIds = async (bookIds) => {
    const chapterIds = await Promise.all(bookIds.map((bookId) => getChapterIds(bookId)));
    return chapterIds.flat();
  };

  /**
   * - nanak-prakash-purbardh => 1
   * - raas-12                => 14
   * - rut-1                  => 15
   * - rut-6                  => 20
   */
  const bookIds = [1, 14, 15, 20];
  const chapterIds = await getAllChapterIds(bookIds);

  return chapterIds.map((id) => ({ params: { id } }));
};

cloudinary.config({
  cloud_name: import.meta.env.CLOUDINARY_CLOUD_NAME,
  api_key: import.meta.env.CLOUDINARY_API_KEY,
  api_secret: import.meta.env.CLOUDINARY_API_SECRET,
});

// TODO: Figure out this stuff later...
function generateOGImage({ artworkUrl, enTitle, book, number, id }) {
  // Check if the provided URL is a Cloudinary URL
  if (artworkUrl.includes('res.cloudinary.com')) {
    const parts = artworkUrl.split('/');
    const fileName = parts.pop().split('.')[0];
    const folder = parts.pop();
    const publicId = `${folder}/${fileName}`;

    // Individual transformations
    const baseTransform = { width: 1200, height: 627, crop: 'fill' };
    const darkOverlay = {
      effect: 'brightness:-80', // Adjust to the desired level.
    };
    const granthTitleOverlay = {
      overlay: {
        font_family: 'Playfair Display',
        font_weight: 'italic',
        font_size: 40,
        text: 'Suraj Prakash Granth',
      },
      color: '#F4FFFD',
      y: -250,
    };
    const bookChapterOverlay = {
      overlay: {
        font_family: 'Playfair Display',
        font_weight: 'black',
        font_size: 30,
        text: `${book.enTitle} - Chapter #${number}`,
      },
      color: '#F4FFFD',
      y: -200,
    };

    const chapterTitleOverlay = {
      overlay: {
        font_family: 'Playfair Display',
        font_weight: 'bold italic',
        font_size: 70,
        text: enTitle,
        width: 900,
        crop: 'fit',
      },
      color: '#F4FFFD',
      y: 0,
    };

    const readNowOverlay = {
      overlay: {
        font_family: 'Sarabun',
        font_weight: 'black',
        font_size: 40,
        text: `Read now with English Translations`,
      },
      color: '#E7DED0',
      y: 200,
    };

    const urlOverlay = {
      overlay: {
        font_family: 'Sarabun',
        font_weight: 'black',
        font_size: 30,
        text: `https://spg.dev/chapters/${id}`,
      },
      color: '#E7DED0',
      y: 250,
    };

    // Generate URL with chained transformations
    const imageUrl = cloudinary.url(publicId, {
      transformation: [
        baseTransform,
        darkOverlay,
        granthTitleOverlay,
        bookChapterOverlay,
        chapterTitleOverlay,
        readNowOverlay,
        urlOverlay,
      ],
    });

    return imageUrl;
  }
  // If it's not a Cloudinary URL, return the original URL
  return artworkUrl;
}

/**
 * Fetch content for the chapter
 */
const { id } = Astro.params;

const API_URL = import.meta.env.API_URL;

const chapterContentRes = await fetch(`${API_URL}/chapters/${id}/content.json`);

const { chapter }: ChapterResponse = await chapterContentRes.json();

/**
 * Fetch footnotes for each Pauri and Tuk
 */
const footnotePromises = [];

for (const chhand of chapter.chhands) {
  for (const pauri of chhand.pauris) {
    if (pauri.footnote?.contentfulEntryId) {
      const promise = fetchFootnoteContent(pauri.footnote.contentfulEntryId).then(
        (customFootnotes) => {
          pauri.footnote.customFootnotes = customFootnotes;
        }
      );
      footnotePromises.push(promise);
    }
    for (const tuk of pauri.tuks) {
      if (tuk.footnote?.contentfulEntryId) {
        const promise = fetchFootnoteContent(tuk.footnote.contentfulEntryId).then(
          (customFootnotes) => {
            tuk.footnote.customFootnotes = customFootnotes;
          }
        );
        footnotePromises.push(promise);
      }
    }
  }
}

await Promise.all(footnotePromises);
---

<GurmukhiLayout title={`SPG - Chapter ${chapter.number} - ${chapter.enTitle}`}>
  <Fragment slot="extra-headers">
    <!-- SEO Meta Tags -->

    <!-- Social Media & Open Graph Meta Tags -->
    <meta
      property="og:title"
      content=`Read Chapter #${chapter.number} - ${chapter.enTitle} (English Translations)`
    />
    <meta property="og:description" content=`${chapter.enShortSummary}` />
    <meta property="og:image" content={`${generateOGImage(chapter)}`} />
    <!-- Dynamically replace {title} with the chapter's title in the above image URL to display the title on the image -->
    <meta property="og:url" content="https://spg.dev" />
    <!-- Replace {your_website_url} with the actual URL of the chapter -->
    <meta property="og:type" content="article" />

    <!-- Twitter Card Meta Tags (if you want a specific card format for Twitter) -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content=`Read Chapter #${chapter.number} - ${chapter.enTitle} (English Translations)`
    />
    <meta name="twitter:description" content=`${chapter.enShortSummary}` />
    <meta name="twitter:image" content={`${generateOGImage(chapter)}`} />
    <!-- Note: Twitter uses its own set of meta tags. They are similar to the OG tags but are specifically used by Twitter -->

    <!-- Header Image -->
    <div
      class="relative flex w-full h-56 bg-gradient-to-b from-base-300 to-transparent sm:h-80 transition-all"
    >
    </div>
    <h1 class="font-serif font-bold italic text-center text-2xl text-base-content">
      {chapter.book.enTitle}
    </h1>
    <div class="flex justify-center">
      <p class="text-base-content my-9 text-center w-2/3">
        {chapter.enShortSummary}
      </p>
    </div>
  </Fragment>

  <div class="flex justify-center">
    <div class="my-3 lg:max-w-5xl flex flex-col items-center">
      <h1 class="italic font-serif py-2 text-xl font-semibold text-center">
        {chapter.enTitle}
      </h1>
      <h2 class="font-serif py-2 font-medium text-center">
        Chapter #{chapter.number} of {chapter.book?.enTitle}
      </h2>
    </div>
  </div>

  <div class="flex w-full justify-center">
    <div class="my-3 lg:max-w-5xl flex flex-col items-center">
      <h3 class="font-serif py-2 font-medium text-center">
        {chapter.chhands.length} Chhands
      </h3>
    </div>
  </div>

  <div class="max-w-3xl m-auto">
    <div class="my-20 flex flex-col md:max-w-xl">
      {
        chapter.chhands.map((chhand) => {
          return (
            <div>
              <h3 class="font-serif text-xl text-info">{chhand.name}</h3>
              {chhand.pauris.map((pauri) => (
                <div class="mb-10 text-left">
                  <Pauri pauri={pauri} />
                </div>
              ))}
            </div>
          );
        })
      }
    </div>
  </div>

  <FootnoteSlideOver client:load />
</GurmukhiLayout>
